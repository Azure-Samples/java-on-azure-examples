on: 
  schedule: 
    - cron: '0 12 * * 4'
  workflow_dispatch: 

name: 'appservice/container-graalvm/README.md'
jobs: 
  validate: 
    runs-on: 'ubuntu-latest'
    steps: 
      - uses: 'azure/login@v1'
        with: 
          subscription-id: '${{ secrets.AZURE_SUBSCRIPTION_ID }}'
          client-id: '${{ secrets.AZURE_CLIENT_ID }}'
          tenant-id: '${{ secrets.AZURE_TENANT_ID }}'
      - uses: 'actions/checkout@v3'
      - run: |
          
          if [[ -z $REGION ]]; then
          export REGION=westus
          fi
          
          if [[ -z $REGION ]]; then
          export REGION=westus
          fi
          
          if [[ -z $REGION ]]; then
          export REGION=westus
          fi
          
          if [[ -z $RESOURCE_GROUP ]]; then
          export RESOURCE_GROUP=joaz-rg-$RANDOM
          echo "Using '"$RESOURCE_GROUP"' as resource group"
          fi
          
          az group create --name $RESOURCE_GROUP --location $REGION
          if [[ -z $ACR_NAME ]]; then
          export ACR_NAME=joazcr$RANDOM
          fi
          
          az acr create \
          --name $ACR_NAME \
          --resource-group $RESOURCE_GROUP \
          --sku Basic \
          --admin-enabled true
          
          cd acr/graalvm
          
          mvn package
          docker build -t builder -f Dockerfile.builder .
          docker run --rm --tty -v $PWD/../..:/mnt builder mvn -P graalvm -pl acr/graalvm clean install
          export ACR_GRAALVM_IMAGE=graalvm:latest
          
          az acr build --registry $ACR_NAME --image $ACR_GRAALVM_IMAGE .
          
          cd ../..
          
          if [[ -z $REGION ]]; then
          export REGION=westus
          fi
          
          if [[ -z $REGION ]]; then
          export REGION=westus
          fi
          
          if [[ -z $RESOURCE_GROUP ]]; then
          export RESOURCE_GROUP=joaz-rg-$RANDOM
          echo "Using '"$RESOURCE_GROUP"' as resource group"
          fi
          
          az group create --name $RESOURCE_GROUP --location $REGION
          if [[ -z $ACR_NAME ]]; then
          export ACR_NAME=joazcr$RANDOM
          fi
          
          az acr create \
          --name $ACR_NAME \
          --resource-group $RESOURCE_GROUP \
          --sku Basic \
          --admin-enabled true
          
          cd acr/create-settings-xml
          
          export ACR_USERNAME=`az acr credential show --name $ACR_NAME \
          --resource-group $RESOURCE_GROUP --query username --output tsv`
          export ACR_PASSWORD=`az acr credential show --name $ACR_NAME \
          --resource-group $RESOURCE_GROUP --query 'passwords[0].value' --output tsv`
          export SETTINGS_XML=$PWD/settings.xml
          
          cd ../..
          
          
          if [[ -z $REGION ]]; then
          export REGION=westus
          fi
          
          if [[ -z $REGION ]]; then
          export REGION=westus
          fi
          
          if [[ -z $RESOURCE_GROUP ]]; then
          export RESOURCE_GROUP=joaz-rg-$RANDOM
          echo "Using '"$RESOURCE_GROUP"' as resource group"
          fi
          
          az group create --name $RESOURCE_GROUP --location $REGION
          
          if [[ -z $APPSERVICE_PLAN ]]; then
          export APPSERVICE_PLAN=javazappsvcplan-$RANDOM
          fi
          
          az appservice plan create \
          --resource-group $RESOURCE_GROUP \
          --location $REGION \
          --name $APPSERVICE_PLAN \
          --is-linux \
          --sku P1v3
          
          cd appservice/container-graalvm
          
          export APPSERVICE_CONTAINER_GRAALVM=appservice-container-graalvm-$RANDOM
          
          mvn azure-webapp:deploy \
          --settings=$SETTINGS_XML \
          -DappName=$APPSERVICE_CONTAINER_GRAALVM \
          -DimageName=$ACR_GRAALVM_IMAGE \
          -DappServicePlan=$APPSERVICE_PLAN \
          -DresourceGroup=$RESOURCE_GROUP \
          -DserverId=$ACR_NAME
          
          echo `az webapp show \
          --resource-group $RESOURCE_GROUP \
          --name $APPSERVICE_CONTAINER_GRAALVM \
          --query 'hostNames[0]' \
          --output tsv`/hello
          
          sleep 180
          cd ../..
          
          
          export RESULT=$(az webapp show --resource-group $RESOURCE_GROUP --name $APPSERVICE_CONTAINER_GRAALVM --output tsv --query state)
          if [[ "$RESULT" != Running ]]; then
          echo 'Web application is NOT running'
          az group delete --name $RESOURCE_GROUP --yes || true
          exit 1
          fi
          export URL=https://$(az webapp show --resource-group $RESOURCE_GROUP --name $APPSERVICE_CONTAINER_GRAALVM --output tsv --query defaultHostName)/hello
          export RESULT=$(curl $URL)
          az group delete --name $RESOURCE_GROUP --yes || true
          if [[ "$RESULT" != *"Hello"* ]]; then
          echo "Response did not contain 'Hello'"
          exit 1
          fi
permissions: 
  contents: 'read'
  id-token: 'write'